{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/environments/environment.ts","webpack:///./src/modules/Init.ts","webpack:///./src/modules/lazy-load/customer/customer.component.html","webpack:///./src/modules/lazy-load/customer/customer.component.scss","webpack:///./src/modules/lazy-load/customer/customer.component.ts","webpack:///./src/modules/lazy-load/lazy-load-routing.module.ts","webpack:///./src/modules/lazy-load/lazy-load.component.html","webpack:///./src/modules/lazy-load/lazy-load.component.scss","webpack:///./src/modules/lazy-load/lazy-load.component.ts","webpack:///./src/modules/lazy-load/lazy-load.module.ts","webpack:///./src/modules/lazy-load/main.ts"],"names":[],"mappings":"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","file":"main.chunk.js","sourcesContent":["var map = {\n\t\"src/modules/lazy-load/order/order.module\": [\n\t\t\"./src/modules/lazy-load/order/order.module.ts\",\n\t\t\"src-modules-lazy-load-order-order-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    ApiUrl:''\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","ï»¿import { enableProdMode } from '@angular/core'\nimport { environment } from '../environments/environment';\r\n\r\nexport function Init()\r\n{\r\n    // enableProdMode();\n    if (environment.ApiUrl.length == 0) {\n        //debugger;\n        environment.ApiUrl = window[\"apiUrl\"];\n        console.log(\"set environment variable api url\" + environment.ApiUrl);\n    }\r\n}","module.exports = \"<p>\\n  customer works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsYXp5LWxvYWQvY3VzdG9tZXIvY3VzdG9tZXIuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.scss']\n})\nexport class CustomerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CustomerComponent } from './customer/customer.component';\n\nconst routes: Routes = [\n    {\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'customer'\n    },\n    {\n        path: 'customer',       \r\n        component: CustomerComponent\n    },\n    {\n        path: 'orders',       \r\n        loadChildren: 'src/modules/lazy-load/order/order.module#OrderModule'\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {useHash:true})],\n  exports: [RouterModule]\n})\nexport class LazyLoadRoutingModule { }\n","module.exports = \"<div>\\n    <nav class=\\\"navbar navbar-default\\\">\\r\\n        <div class=\\\"container-fluid\\\">\\r\\n            <!-- Brand and toggle get grouped for better mobile display -->\\r\\n            <div class=\\\"navbar-header\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#bs-example-navbar-collapse-1\\\" aria-expanded=\\\"false\\\">\\r\\n                    <span class=\\\"sr-only\\\">Toggle navigation</span>\\r\\n                    <span class=\\\"icon-bar\\\"></span>\\r\\n                    <span class=\\\"icon-bar\\\"></span>\\r\\n                    <span class=\\\"icon-bar\\\"></span>\\r\\n                </button>\\r\\n                <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Lazy Loading</a>\\r\\n            </div>\\r\\n\\r\\n            <!-- Collect the nav links, forms, and other content for toggling -->\\r\\n            <div class=\\\"collapse navbar-collapse\\\" id=\\\"bs-example-navbar-collapse-1\\\">\\r\\n                <ul class=\\\"nav navbar-nav\\\">\\r\\n                    <li class=\\\"active\\\" ><a href=\\\"#\\\" routerLink=\\\"customer\\\">Customer <span class=\\\"sr-only\\\">(current)</span></a></li>\\r\\n                    <li><a href=\\\"#\\\" routerLink=\\\"orders\\\">Orders</a></li>\\r\\n                  <!--  <li class=\\\"dropdown\\\">\\r\\n                        <a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">Dropdown <span class=\\\"caret\\\"></span></a>\\r\\n                        <ul class=\\\"dropdown-menu\\\">\\r\\n                            <li><a href=\\\"#\\\">Action</a></li>\\r\\n                            <li><a href=\\\"#\\\">Another action</a></li>\\r\\n                            <li><a href=\\\"#\\\">Something else here</a></li>\\r\\n                            <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                            <li><a href=\\\"#\\\">Separated link</a></li>\\r\\n                            <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                            <li><a href=\\\"#\\\">One more separated link</a></li>\\r\\n                        </ul>\\r\\n                    </li>-->\\r\\n                </ul>\\r\\n              <!-- <form class=\\\"navbar-form navbar-left\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search\\\">\\r\\n                    </div>\\r\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-default\\\">Submit</button>\\r\\n                </form>\\r\\n                <ul class=\\\"nav navbar-nav navbar-right\\\">\\r\\n                    <li><a href=\\\"#\\\">Link</a></li>\\r\\n                    <li class=\\\"dropdown\\\">\\r\\n                        <a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">Dropdown <span class=\\\"caret\\\"></span></a>\\r\\n                        <ul class=\\\"dropdown-menu\\\">\\r\\n                            <li><a href=\\\"#\\\">Action</a></li>\\r\\n                            <li><a href=\\\"#\\\">Another action</a></li>\\r\\n                            <li><a href=\\\"#\\\">Something else here</a></li>\\r\\n                            <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                            <li><a href=\\\"#\\\">Separated link</a></li>\\r\\n                        </ul>\\r\\n                    </li>\\r\\n                </ul>-->\\r\\n            </div><!-- /.navbar-collapse -->\\r\\n        </div><!-- /.container-fluid -->\\r\\n    </nav>\\n</div>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsYXp5LWxvYWQvbGF6eS1sb2FkLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-lazy-load',\n  templateUrl: './lazy-load.component.html',\n  styleUrls: ['./lazy-load.component.scss']\n})\nexport class LazyLoadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LazyLoadRoutingModule } from './lazy-load-routing.module';\nimport { LazyLoadComponent } from './lazy-load.component';\nimport { CustomerComponent } from './customer/customer.component';\n\n@NgModule({\n  declarations: [LazyLoadComponent, CustomerComponent],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    LazyLoadRoutingModule\n    ],\n    providers: [],\n    bootstrap: [LazyLoadComponent]\n})\nexport class LazyLoadModule { }\n","ï»¿import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { LazyLoadModule } from './lazy-load.module';\nimport { Init } from '../Init'\n\n//set url from web configLazyLoadModule\nInit()\n\nplatformBrowserDynamic().bootstrapModule(LazyLoadModule);\n// if (document.readyState === 'complete') {\n//     platformBrowserDynamic().bootstrapModule(LazyLoadModule);\n\n//} else {\n//     document.addEventListener('DOMContentLoaded', function () {\n//         return platformBrowserDynamic().bootstrapModule(LazyLoadModule);\n//     });\n//}\n\n"],"sourceRoot":""}